import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { Bounds, Point, Note } from '../../../core/model/datatypes';
import utilInstance from '../../../core/model/util';
import { NotesService } from '../../../core/provider/notes.service';
import { ViewportService } from '../../provider/viewport.service';

@Component({
  selector: 'app-note',
  templateUrl: './note.component.html',
  styleUrls: ['./note.component.scss']
})
export class NoteComponent implements OnInit {

  //generated by the note service
  @Input()  id: number;
  @Input()  default_cell: number;

  @Input()
  get scale(): number { return this._scale; }
  set scale(value: number) {
    this._scale = value;
    this.rescale();
  }
  private _scale:number = 5;

  @Output() deleteNote: any = new EventEmitter();  
  @Output() saveNoteText: any = new EventEmitter();  

  note: Note;
  bounds: Bounds = {
    topleft: {x:0, y:0},
    width: 200, 
    height: 200
  };


  markdown: string = "";

  show_url: boolean = false;
  canvas: HTMLCanvasElement;
  cx: any;
  disable_drag: boolean = false;
  image_url: string = "";
  moveSubscription: Subscription;
  constructor(private notes: NotesService,private viewport:ViewportService) { 

  }

  ngOnInit() {
    this.note = this.notes.get(this.id);
    if(this.note == undefined){
      this.bounds.topleft = {x: 0, y: 0};
    }else{
      this.bounds.topleft = {
        x: this.note.interlacement.j * this.scale,
        y: this.note.interlacement.i * this.scale
      }

    }

   
  }

  ngAfterViewInit(){
    this.canvas = <HTMLCanvasElement> document.getElementById("notecanvas-"+this.note.id.toString());
    this.cx = this.canvas.getContext("2d");
    this.rescale();
    
  }

  /**
   * called via resize button
   * @param event 
   */
  @HostListener('mousedown', ['$event'])
  private onStart(event) {
    if(event.target.id == 'resize_button'){
      this.moveSubscription = 
           fromEvent(document, 'mousemove').subscribe(e => this.onDrag(e)); 

    }

  }

  @HostListener('mouseup', ['$event'])
  private onEnd(event) {
      if(this.moveSubscription !== undefined) this.moveSubscription.unsubscribe();
    

  }

  /**
   * called via drag handler to reset position
   * @param event 
   */
  onDrag(event: any){
    const zoom_factor:number = this.default_cell/this.scale;
    const pointer:Point = {x: event.clientX, y: event.clientY};  
    this.note.width =(pointer.x - this.bounds.topleft.x + 10)*zoom_factor;
    this.note.height = (pointer.y - this.bounds.topleft.y + 10)*zoom_factor;
  }


  delete(){
    this.deleteNote.emit(this.note.id);
  }
    

  dragMove($event: any) {
    const pointer:Point = $event.pointerPosition;
    const relative:Point = utilInstance.getAdjustedPointerPosition(pointer, this.viewport.getBounds());
    const adj:Point = utilInstance.snapToGrid(relative, this.scale);
    this.bounds.topleft = adj;
    this.note.interlacement = utilInstance.resolvePointToAbsoluteNdx(adj, this.scale);
  }


  /**
   * Called when main palette is rescaled and triggers call to rescale this element, and update its position 
   * so it remains at the same coords. 
   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)
   */
   rescale(){
    if(this.note === undefined){
       console.error("note is undefined on rescale");
       return;
    }

    const zoom_factor:number = this.scale/this.default_cell;

    //redraw at scale
    const container: HTMLElement = document.getElementById('scalenote-'+this.note.id);
    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';


    this.bounds.topleft = {
      x: this.note.interlacement.j * this.scale,
      y: this.note.interlacement.i * this.scale
    };

  }

  save(){
    this.saveNoteText.emit();
  }


  /**
   * draw onto the supplied canvas, to be used when printing
   * @returns 
   */
   drawForPrint(canvas, cx, scale: number) {

    if(canvas === undefined) return;
   
   

    //draw the supplemental info like size
    cx.fillStyle = "#666666";
    cx.font = scale*2+"px Verdana";
    cx.fillText(this.note.text,this.bounds.topleft.x, this.bounds.topleft.y+this.bounds.height + 20 );

  }

  disableDrag(){
    this.disable_drag = true;
  }

  enableDrag(){
    this.disable_drag = false;
  }

  uploadImage(){
    this.show_url = true;

  }

  enterUrl(){
    this.show_url = false;

  }

  colorChange(event: any){
   this.notes.setColor(this.id, event);
  }

  hidePreview(e) { console.log(e.getContent()); }


  // expandDown(event: any){
  //   console.log("EXPAND DOWN")
  //   this.moveSubscription = 
  //         fromEvent(event.target, 'mousemove').subscribe(e => this.onDrag(e)); 
  // }

  // expandUp(event: any) {
  //   console.log("EXPAND UP")
  //   this.moveSubscription.unsubscribe();
  // }





}
