import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { Bounds, Point, Note } from '../../../core/model/datatypes';
import utilInstance from '../../../core/model/util';
import { NotesService } from '../../../core/provider/notes.service';
import { ViewportService } from '../../provider/viewport.service';
import { ZoomService } from '../../../core/provider/zoom.service';
import { CdkDragMove } from '@angular/cdk/drag-drop';

@Component({
  selector: 'app-note',
  templateUrl: './note.component.html',
  styleUrls: ['./note.component.scss']
})
export class NoteComponent implements OnInit {

  //generated by the note service
  @Input()  id: number;
  @Output() deleteNote: any = new EventEmitter();  
  @Output() saveNoteText: any = new EventEmitter();  

  note: Note;


  topleft: Point = {x: 0, y: 0};
  markdown: string = "";
  show_url: boolean = false;
  canvas: HTMLCanvasElement;
  cx: any;
  disable_drag: boolean = false;
  image_url: string = "";
  moveSubscription: Subscription;


  constructor(
    private notes: NotesService,
    public zs: ZoomService) { 

  }

  ngOnInit() {
    this.note = this.notes.get(this.id);
    if(this.note == undefined){
      this.topleft = {x: 0, y: 0};
    }else{
      this.topleft = {
        x: this.note.topleft.x,
        y: this.note.topleft.y
      }

    }

   
  }

  ngAfterViewInit(){
    this.setPosition(this.topleft)

  }

  setPosition(topleft: Point){
    this.topleft = {x: topleft.x, y: topleft.y};
    this.canvas = <HTMLCanvasElement> document.getElementById("notecanvas-"+this.note.id.toString());
    this.cx = this.canvas.getContext("2d");
    let note_container = document.getElementById('note-'+this.id);
    note_container.style.transform = 'none'; //negate angulars default positioning mechanism
    note_container.style.top =  this.topleft.y+"px";
    note_container.style.left =  this.topleft.x+"px";
  }

  /**
   * called via resize button
   * @param event 
   */
  // @HostListener('mousedown', ['$event'])
  // private onStart(event) {
  //   if(event.target.id == 'resize_button'){
  //     this.moveSubscription = 
  //          fromEvent(document, 'mousemove').subscribe(e => this.onDrag(e)); 

  //   }

  // }

  // @HostListener('mouseup', ['$event'])
  // private onEnd(event) {
  //     if(this.moveSubscription !== undefined) this.moveSubscription.unsubscribe();
    

  // }

  /**
   * called by the expanding function
   * @param event 
   */
  // onDrag(event: any){
  //   const zoom_factor:number = this.default_cell/this.scale;
  //   const pointer:Point = {x: event.clientX, y: event.clientY};  
  //   this.note.width =(pointer.x - this.bounds.topleft.x + 10)*zoom_factor;
  //   this.note.height = (pointer.y - this.bounds.topleft.y + 10)*zoom_factor
    
  // }


  delete(){
    this.deleteNote.emit(this.note.id);
  }
    

  dragMove($event: CdkDragMove) {


    let parent = document.getElementById('scrollable-container');
    let note_container = document.getElementById('note-'+this.id);
    let rect_palette = parent.getBoundingClientRect();

    const zoom_factor =  1/this.zs.getMixerZoom();

    let screenX = $event.pointerPosition.x-rect_palette.x+parent.scrollLeft; 
    let scaledX = screenX* zoom_factor;
    let screenY = $event.pointerPosition.y-rect_palette.y+parent.scrollTop;
    let scaledY = screenY * zoom_factor;
   


    this.topleft = {
      x: scaledX,
      y: scaledY

    }
    note_container.style.transform = 'none'; //negate angulars default positioning mechanism
    note_container.style.top =  this.topleft.y+"px";
    note_container.style.left =  this.topleft.x+"px";

    this.note.topleft = {
      x: this.topleft.x,
      y: this.topleft.y
    };
  }


  /**
   * Called when main palette is rescaled and triggers call to rescale this element, and update its position 
   * so it remains at the same coords. 
   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)
   */
   rescale(){

  }

  save(){
    this.saveNoteText.emit();
  }


  /**
   * draw onto the supplied canvas, to be used when printing
   * @returns 
   */
   drawForPrint(canvas, cx, scale: number) {

    // if(canvas === undefined) return;
   
   

    // //draw the supplemental info like size
    // cx.fillStyle = "#666666";
    // cx.font = scale*2+"px Verdana";
    // cx.fillText(this.note.text,this.bounds.topleft.x, this.bounds.topleft.y+this.bounds.height + 20 );

  }

  disableDrag(){
    this.disable_drag = true;
  }

  enableDrag(){
    this.disable_drag = false;
  }

  uploadImage(){
    this.show_url = true;

  }

  enterUrl(){
    this.show_url = false;

  }

  colorChange(event: any){
   this.notes.setColor(this.id, event);
  }

  hidePreview(e) { console.log(e.getContent()); }


}
