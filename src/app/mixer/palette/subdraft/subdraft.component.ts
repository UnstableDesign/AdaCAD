import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { SystemsService } from '../../../core/provider/systems.service';
import { Bounds, Draft, DraftNode, Interlacement, LoomSettings, Point } from '../../../core/model/datatypes';
import { flipDraft, getDraftAsImage, getDraftName, isSet, isUp, warps, wefts } from '../../../core/model/drafts';
import utilInstance from '../../../core/model/util';
import { FileService } from '../../../core/provider/file.service';
import { MaterialsService } from '../../../core/provider/materials.service';
import { TreeService } from '../../../core/provider/tree.service';
import { WorkspaceService } from '../../../core/provider/workspace.service';
import { InkService } from '../../provider/ink.service';
import { LayersService } from '../../provider/layers.service';
import { MultiselectService } from '../../provider/multiselect.service';
import { ViewportService } from '../../provider/viewport.service';
import { OperationComponent } from '../operation/operation.component';
import { max } from 'mathjs';
import { DraftrenderingComponent } from '../draftrendering/draftrendering.component';



@Component({
  selector: 'app-subdraft',
  templateUrl: './subdraft.component.html',
  styleUrls: ['./subdraft.component.scss']
})



export class SubdraftComponent implements OnInit {


  @ViewChild(DraftrenderingComponent) draft_rendering;
  @Input()  id: number; //generated by the tree service
  @Input()  default_cell: number;


  @Input()
  get scale(): number { return this._scale; }
  set scale(value: number) {
    this._scale = value;
    this.rescale().catch(e => console.log(e))
  }
  private _scale:number = 5;

  @Input()
  get draft(): Draft { return this._draft; }
  set draft(value: Draft) {
    this._draft = value;
    if(this.draft_rendering) this.draft_rendering.drawDraft(value);
  }

  private _draft:Draft = null;

  @Input()
  get topleft(): Point { return this._topleft; }
  set topleft(value: Point) {
    this.updateViewport(value);
    this._topleft = value;
    ;
  }

  private _topleft:Point =  {x: 0, y: 0};

  

  @Output() onSubdraftMove = new EventEmitter <any>(); 
  @Output() onSubdraftDrop = new EventEmitter <any>(); 
  @Output() onSubdraftStart = new EventEmitter <any>(); 
  @Output() onDeleteCalled = new EventEmitter <any>(); 
  @Output() onDuplicateCalled = new EventEmitter <any>(); 
  @Output() onConnectionMade = new EventEmitter <any>(); 
  @Output() onConnectionRemoved = new EventEmitter <any>(); 
  @Output() onDesignAction = new  EventEmitter <any>();
  @Output() onConnectionStarted:any = new EventEmitter<any>();
  @Output() onSubdraftViewChange:any = new EventEmitter<any>();
  @Output() createNewSubdraftFromEdits:any = new EventEmitter<any>();
  @Output() onNameChange:any = new EventEmitter<any>();
  @Output() onShowDetails:any = new EventEmitter<any>();

  @ViewChild('draftrendering') draftrendering: DraftrenderingComponent;





  parent_id: number = -1;

  /**
  * flag to tell if this is in a mode where it is looking foor a connectino
  */
  selecting_connection: boolean = false;


  /**
   * hold the top left point as an interlacement, independent of scale
   */
  interlacement: Interlacement;

  // private _scale: number; 

  ink = 'neq'; //can be or, and, neq, not, splice

  counter:number  =  0; // keeps track of how frequently to call the move functions
 
  counter_limit: number = 50;  //this sets the threshold for move calls, lower number == more calls
 
  last_ndx:Interlacement = {i: -1, j:-1, si: -1}; //used to check if we should recalculate a move operation

  moving: boolean  = false;
 
  disable_drag: boolean = false;

  is_preview: boolean = false;
 
  zndx = 0;

  has_active_connection: boolean = false;

  set_connectable:boolean = false;


  draft_visible: boolean = true;

  loom_settings: LoomSettings;


  use_colors: boolean = false;

  draft_zoom: number = 1;


  constructor(private inks: InkService, 
    private layer: LayersService, 
    private ms: MaterialsService, 
    private ss: SystemsService, 
    public tree: TreeService,
    private fs: FileService,
    private viewport: ViewportService,
    private dialog: MatDialog,
    public ws: WorkspaceService,
    private multiselect: MultiselectService) { 

      this.zndx = layer.createLayer();

  }

  ngOnInit(){

    if(!this.is_preview) this.parent_id = this.tree.getSubdraftParent(this.id);
    const tl: Point = this.viewport.getTopRight();
    const tl_offset = {x: tl.x - 250, y: tl.y + 200};

    if(this.topleft.x === 0 && this.topleft.y === 0) this.setPosition(tl_offset);
    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(this.topleft, this.scale);

    if(!this.is_preview) this.viewport.addObj(this.id, this.interlacement);

    const draft = this.tree.getDraft(this.id);
    this.loom_settings = this.tree.getLoomSettings(this.id);

    const dn:DraftNode = <DraftNode> this.tree.getNode(this.id);
    this.use_colors = dn.render_colors;


    if(this.tree.isSibling(this.id)) this.disableDrag();


  }



  ngAfterViewInit() {


    this.draft_rendering.draft_cell_size = this.calculateDefaultCellSize(this.draft);
  

    /**
     * when loading a draft from a file, the connections won't match if the connection is drawn before this
     * function executes. For this reason, I made these sequential function and then they manually call updates
     */
    this.draft_rendering.drawDraft(this.draft).then(out => {
      return this.rescale();

    }).then(after => {
      this.updateViewport(this.topleft);
  
      //this must be called to trigger redrawing on any outgoing connections
      this.onSubdraftMove.emit({id: this.id, point: this.topleft});

  
      
    });

  }


  nameFocusOut(){
    this.onNameChange.emit(this.id);
    const scale = document.getElementById('scale-'+this.id);
  }


/**
 * this is called when the global workspace is rescaled. 
 * @returns 
 */
  rescale() : Promise<boolean>{


    if(this.draft === null){
      return Promise.reject("draft is null on draft rescale");
    } 

    const zoom_factor:number = this.scale/this.default_cell;

    //redraw at scale
    const container: HTMLElement = document.getElementById('scale-'+this.id.toString());
   
    if(container === null) return Promise.reject("no container initialized on draft rescale");


    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';

   
    this.topleft = {
      x: this.interlacement.j * this.scale,
      y: this.interlacement.i * this.scale
    };

    return Promise.resolve(true)



  }

  /**called when bounds change, updates the global view port */
  updateViewport(topleft: Point){
    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(topleft, this.scale);
    this.viewport.updatePoint(this.id, this.interlacement);

  }


  toggleMultiSelection(e: any){
    if(e.shiftKey){
      this.multiselect.toggleSelection(this.id, this.topleft);
    }else{
      this.multiselect.clearSelections();
    }
  }
  

  connectionEnded(){
    this.selecting_connection = false;
    this.enableDrag();
  }

  connectionStarted(obj){
    let event = obj.event;
    let childid = obj.id;

    if(this.selecting_connection == true){
      this.selecting_connection = false;
      this.onConnectionStarted.emit({
        type: 'stop',
        event: event,
        id: childid
      });
    }else{ 
      this.selecting_connection = true;
      
      this.disableDrag();

      this.onConnectionStarted.emit({
        type: 'start',
        event: event,
        id: childid
      });
    }

  }



  /**
   * called on create to position the element on screen
   * @param pos 
   */
  setPosition(pos: Point){
    this.enableDrag();
    this.topleft = pos;
    this.updateViewport(this.topleft);
  }



  public inkActionChange(name: any){
    this.ink = name;
    this.inks.select(name);
    //this.drawDraft();
  }

  /**
   * gets the next z-ndx to place this in front
   */
  public setAsPreview(){
    this.is_preview = true;
     this.zndx = this.layer.createLayer();
  }

 

  /**
   * does this subdraft exist at this point?
   * @param p the absolute position of the coordinate (based on the screen)
   * @returns true/false for yes or no
   */
  public hasPoint(p:Point) : boolean{
    const size = document.getElementById('scale'+this.id)


      const endPosition = {
        x: this.topleft.x + size.offsetWidth,
        y: this.topleft.y + size.offsetHeight,
      };

      if(p.x < this.topleft.x || p.x > endPosition.x) return false;
      if(p.y < this.topleft.y || p.y > endPosition.y) return false;

    
    return true;

  }


/**
 * Takes row/column position in this subdraft and translates it to an absolution position  
 * @param ndx the index
 * @returns the absolute position as nxy
 */
 public resolveNdxToPoint(ndx:Interlacement) : Point{
  
  let y = this.topleft.y + ndx.i * this.scale;
  let x = this.topleft.x + ndx.j * this.scale;
  return {x: x, y:y};

}

/**
 * Takes an absolute coordinate and translates it to the row/column position Relative to this subdraft
 * @param p the screen coordinate
 * @returns the row and column within the draft (i = row, j=col), returns -1 if out of bounds
 */
  public resolvePointToNdx(p:Point) : Interlacement{
    const draft = this.tree.getDraft(this.id);

    let i = Math.floor((p.y -this.topleft.y) / this.scale);
    let j = Math.floor((p.x - this.topleft.x) / this.scale);

    if(i < 0 || i >= wefts(draft.drawdown)) i = -1;
    if(j < 0 || j >= warps(draft.drawdown)) j = -1;

    return {i: i, j:j, si: i};

  }



/**
 * takes an absolute reference and returns the value at that cell boolean or null if its unset
 * @param p a point of the absolute poistion of coordinate in question
 * @returns true/false/or null representing the eddle value at this point
 */
  public resolveToValue(p:Point) : boolean{

    const coords = this.resolvePointToNdx(p);

    if(coords.i < 0 || coords.j < 0) return null; //this out of range
    
    const draft = this.tree.getDraft(this.id);

    if(!draft.drawdown[coords.i][coords.j].is_set) return null;
    
    return isUp(draft.drawdown, coords.i, coords.j);
  
  }



  // /**
  //  * sets a new draft
  //  * @param temp the draft to set this component to
  //  */
  // setNewDraft(temp: Draft) {

  //   this.bounds.width = temp.warps * this.scale;
  //   this.bounds.height = temp.wefts * this.scale;
  //   this.draft.reload(temp);
  //   this.drawDraft();

  // }

  // setComponentPosition(point: Point){
  //   this.bounds.topleft = point;
  // }


  // setComponentBounds(bounds: Bounds){
  //   this.setPosition(bounds.topleft);
  //   this.bounds = bounds;
  // }
  /**
   * manually sets the component size. While such an operation should be handled on init but there is a bug where this value is checked before the 
   * component runds its init sequence. Manually adding the data makes it possible for check for intersections on selection and drawing end.
   * @param width 
   * @param height 
   */
  // setComponentSize(width: number, height: number){
  //   this.bounds.width = width;
  //   this.bounds.height = height;
  // }

 
  redrawExistingDraft(){
    this.draft_rendering.drawDraft(this.draft);
  }




  calculateDefaultCellSize(draft: Draft): number {
    const num_cells = wefts(draft.drawdown) * warps(draft.drawdown);
    if(num_cells < 1000) return 10;
    if(num_cells < 10000) return 8;
    if(num_cells < 100000)return  5;
    if(num_cells < 1000000) return  2;
    return 1;
  }








  /**
   * gets the position of this elment on the canvas. Dyanic top left might be bigger due to scolling intersection
   * previews. Use static for all calculating of intersections, etc. 
   * @returns 
   */
  getTopleft(): Point{
    return this.topleft;
  }

    /**
   * prevents hits on the operation to register as a palette click, thereby voiding the selection
   * @param e 
   */
     mousedown(e: any){
      this.onShowDetails.emit(this.id);
      e.stopPropagation();
  
  
    }

  

  //The drag event has handled the on screen view, but internally, we need to track the top left of the element for saving and loading. 
  dragEnd($event: any) {

    let parent = document.getElementById('scrollable-container');
    let subdraft_container = document.getElementById('scale-'+this.id);

    let rect_palette = parent.getBoundingClientRect();
    let rect_sd = subdraft_container.getBoundingClientRect(); 

    this.topleft.x = rect_sd.x - rect_palette.x;
    this.topleft.y = rect_sd.y - rect_palette.y;

 
    this.moving = false;
    this.counter = 0;  
    this.last_ndx = {i: -1, j:-1, si: -1};
    this.multiselect.setRelativePosition(this.topleft);
    this.onSubdraftDrop.emit({id: this.id});
  }

  dragStart($event: any) {


    this.moving = true;
    this.counter = 0;  
      //set the relative position of this operation if its the one that's dragging
     if(this.multiselect.isSelected(this.id)){
      this.multiselect.setRelativePosition(this.topleft);
     }else{
      this.multiselect.clearSelections();
     }
    this.onSubdraftStart.emit({id: this.id});
 

  }

  dragMove($event: any) {
    let parent = document.getElementById('scrollable-container');
    let subdraft_container = document.getElementById('scale-'+this.id);

    let rect_palette = parent.getBoundingClientRect();
    let rect_sd = subdraft_container.getBoundingClientRect(); 

    this.topleft.x = rect_sd.x - rect_palette.x;
    this.topleft.y = rect_sd.y - rect_palette.y;

    this.onSubdraftMove.emit({id: this.id, point: this.topleft});

  }

  disableDrag(){
    this.disable_drag = true;
  }

  enableDrag(){
    this.disable_drag = false;
  }

  showhide(){
    this.draft_visible = !this.draft_visible;
    this.onSubdraftViewChange.emit(this.id);
  }

  connectionClicked(id:number){
    this.has_active_connection  = true;
    // if(this.active_connection_order === 0){
    //   this.onConnectionMade.emit(id);
    // }else{
    //   this.onConnectionRemoved.emit(id);
    // }


  }

  resetConnections(){
    this.has_active_connection = false;
  }



  async designAction(e){

    console.log("DESIGN ACTION ", e)
    let event = e.event;
    let id = e.id;

    switch(event){
      case 'duplicate':   
      this.onDuplicateCalled.emit({id});
      break;

      case 'delete': 
        this.onDeleteCalled.emit({id});
      break;

      default: 
        this.onDesignAction.emit({id});
      break;

    }
  }



  
    async saveAsWif() {

      // const draft = this.tree.getDraft(this.id);
      // const loom = this.tree.getLoom(this.id);

      
      

      // const a = document.createElement('a');
      // return this.fs.saver.wif(draft, loom)
      // .then(href => {
      //   a.href = href;
      //   a.download  = getDraftName(draft) +".wif";
      //   a.click();
      // });
    
    }
  


    /**
     * Open this when 
     * @returns 
     */
    finetune(){
      this.onShowDetails.emit(this.id);
    }

 


}
