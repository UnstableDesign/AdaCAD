"use strict";(self.webpackChunkada_ca_ddocs=self.webpackChunkada_ca_ddocs||[]).push([[5453],{6351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(5893),a=n(3905);const o={sidebar_position:6},i="DynamicOperation",c={id:"howtodevelop/reference/operation/dynamicoperation",title:"DynamicOperation",description:'A dynamic operation describes a special type of operation where one of the inputs to the parameters generates inlets that accept inputs. An example is the "Image Map" function, where uploading an image file generates inlets each assigned to a different color. The dynamicparamid identifies which parameter (in the operations parameters array), triggers the generation of inlets.  dynamicparamtype describes the kind of dynamic action that will happen when this input is triggered.  onParamChange accepts a function that performs the computation to translate the dynamic parameter value into a series of inlets, returned only as value to be attached to the dynamic inlets.',source:"@site/docs/howtodevelop/reference/operation/dynamicoperation.md",sourceDirName:"howtodevelop/reference/operation",slug:"/howtodevelop/reference/operation/dynamicoperation",permalink:"/docs/howtodevelop/reference/operation/dynamicoperation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"devDocsSidebar",previous:{title:"Operation",permalink:"/docs/howtodevelop/reference/operation/"},next:{title:"Sequence",permalink:"/docs/howtodevelop/reference/sequence/"}},p={},s=[];function d(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"dynamicoperation",children:"DynamicOperation"}),"\n",(0,r.jsxs)(t.p,{children:["A dynamic operation describes a special type of ",(0,r.jsx)(t.a,{href:"./opereation",children:"operation"}),' where one of the inputs to the parameters generates inlets that accept inputs. An example is the "Image Map" function, where uploading an image file generates inlets each assigned to a different color. The ',(0,r.jsx)(t.code,{children:"dynamic_param_id"})," identifies which parameter (in the operations parameters array), triggers the generation of inlets.  ",(0,r.jsx)(t.code,{children:"dynamic_param_type"})," describes the kind of dynamic action that will happen when this input is triggered.  ",(0,r.jsx)(t.code,{children:"onParamChange"})," accepts a function that performs the computation to translate the dynamic parameter value into a series of inlets, returned only as value to be attached to the dynamic inlets."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:'title="src/app/core/model/datatypes.js"',children:"export type DynamicOperation = Operation &  {\n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  onParamChange: ( param_vals: Array<OpParamVal>, inlets: Array<OperationInlet>, inlet_vals: Array<any>, changed_param_id: number, param_val: any) => Array<any>;\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3905:(e,t,n)=>{n.d(t,{ah:()=>s});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=s(n),h=a,f=m["".concat(p,".").concat(h)]||m[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));l.displayName="MDXCreateElement"}}]);